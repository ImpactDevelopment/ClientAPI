/*
 * Copyright 2017 ImpactDevelopment
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

/**
 * Builds a CDK zip in builds/distributions using the cdk directory and variables from the gradle config
 */
task('makeCDK', type: Zip) {
	baseName = project.name
	classifier = 'CDK'
	version = project.version
	destinationDir = file('build/distributions')

	// License
	from 'LICENSE'
	rename 'LICENSE', 'LICENSE.txt'

	// Include the gradle stuff
	from 'gradlew', 'gradlew.bat'
	into('gradle') { from 'gradle' }

	// Include the example code
	into('src/main') { from 'src/test' }

	// Include everything in cdk, and replace any @TOKEN@s
	from('cdk') {
		filter(ReplaceTokens, tokens: [
			CAPI_VERSION : project.version,
			MC_VERSION : minecraft.version,
			FORGEGRADLE_VERSION: project.forgeGradleVersion,
			MIXINGRADLE_VERSION: project.mixinGradleVersion,
			ALPINE_VERSION: project.alpineVersion,
			MIXIN_VERSION: project.mixinVersion,
			TT_VERSION: project.typetoolsVersion,
			MAPPINGS: minecraft.mappings,
			TWEAKER: minecraft.tweakClass
		])

		rename 'gitignore\\.txt', '.gitignore'
	}
}

tasks.build.dependsOn makeCDK

task('setupGitHooks') {
	makeScriptFile '.git/hooks/pre-commit', '''#/bin/sh
# Store the current commit, staged changes and dirty tree as
# seperate commits, then checkout only the staged changes
parent_hash=`git rev-parse -q --verify HEAD`

# Commit the current staged changes
git commit -q --no-verify --allow-empty --allow-empty-message -m ""
stage_hash=`git rev-parse -q --verify HEAD`

# Commit all the unstaged changes
git add -A
git commit -q --no-verify --allow-empty --allow-empty-message -m ""
dirty_hash=`git rev-parse -q --verify HEAD`

# Reset back to the parent commit and checkout the staged changes
git reset -q --hard ${parent_hash}
git read-tree --reset -u ${stage_hash}

# Run gradle and save it's return code
./gradlew check
rtn=$?

# Restore the unstaged changes and return test results to git
git read-tree --reset ${dirty_hash}
exit ${rtn}
'''

	makeScriptFile '.git/hooks/commit-msg', '''#/bin/sh
# Validate commit message

# TODO 50/72 rule
'''
}

// Run on every gradle import, making it basically automatic
build.dependsOn setupGitHooks
